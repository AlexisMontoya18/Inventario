@model SystemaVidanta.Models.Article

@{
    ViewBag.Title = "Create";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        <div class="row container-fluid">
            <div class="well col-sm-12 col-md-12 col-lg-12">
                <h2 align="center">REGISTRAR ARTÍCULO </h2> <br>
                <div class=" well">
                    <div class="col-sm-6 col-md-4 col-lg-4">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.NombreArtículo, htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                @Html.EditorFor(model => model.NombreArtículo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NombreArtículo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Descripción, htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                @Html.EditorFor(model => model.Descripción, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Descripción, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Marca, htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                @Html.EditorFor(model => model.Marca, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Marca, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Modelo, htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                @Html.EditorFor(model => model.Modelo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Modelo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FechaEntrada, htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                @Html.EditorFor(model => model.FechaEntrada, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FechaEntrada, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 col-md-4 col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FechaSalida, htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                @Html.EditorFor(model => model.FechaSalida, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FechaSalida, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-9 col-md-10">
                            <input type="submit" value="Guardar" class="btn btn-success" />
                        </div>
                    </div>

                </div>


                <div>
                    <a href="@Url.Action("Index")" class="btn btn-default"><i class="fas fa-long-arrow-alt-left"></i> Ir a la lista</a>
                </div>



            </div>



        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">const claveEmpleado = document.getElementById("NoEmpleado")
    const nombre = document.getElementById("Nombre")
    const puesto = document.getElementById("Puesto")
    const departamento = document.getElementById("Departamento")
    claveEmpleado.addEventListener("blur", function () {
        getEmployeeData()
    })

    const IdArticulo = document.getElementById("IdArticulo")
    const descripcion = document.getElementById("Descripcion")
    const marca = document.getElementById("Marca")
    const modelo = document.getElementById("Modelo")
    IdArticulo.addEventListener("blur",function() {
            getArticleData()
    })

    function getEmployeeData() {
        let clave = claveEmpleado.value
        fetch(`http://10.23.20.40:8080/api/empleados/oth/${clave}`)
            .then(response => response.json())
            .then(data => {
                nombre.value = `${data.Nombre} ${data.Apellidos}`
                puesto.value = data.PuestoNom
                departamento.value = data.DepartamentoNom
            })
            .catch((error) => console.error(error.message))
    }

    function getArticleData() {
        let id = IdArticulo.value
        fetch(`http://10.23.20.40:8080/api/articulos/${id}`)
            .then(response => response.json())
            .then(data => {
                descripcion.value = data.Descripcion
                marca.value = data.Marca
                modelo.value = data.Modelo
            })
            .catch((error) => console.error(error.message))
    }</script>

